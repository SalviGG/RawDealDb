@using RawDealDb.Core.DTO.OmniFaqDTO;
@using RawDealDb.UI.Interfaces;
@inject IJsonService _jsonService;


<MudDataGrid T="ContentDto" Items="@_omniFaqDto.Content" Filterable="false" QuickFilter="@_quifilter" Bordered="true" Class="ma-2">
    <ToolBarContent>
        <MudTextField @bind-Value="_searchString" Placeholder="Search value" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
    </ToolBarContent>
    <Columns>
        <TemplateColumn>
            <CellTemplate>
                <MudCard>
                    <MudCardHeader Style="text-decoration: underline; font-weight: bold;">
                        @((MarkupString)context.Item.Name)
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText>@((MarkupString)context.Item.Value)</MudText>
                        </MudCardContent>
                    </MudCard>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>


    @code {
    private string _searchString = string.Empty;
    private OmniFaqDto _omniFaqDto = new OmniFaqDto();

    protected override async Task OnInitializedAsync()
    {
        _omniFaqDto = await _jsonService.GetOmniFaq();
    }

    private Func<ContentDto, bool> _quifilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Value.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;

    };
}