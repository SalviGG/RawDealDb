@using RawDealDb.Core.DTO;
@using RawDealDb.UI.Interfaces;
@inject ICardService _cardService;


<MudDataGrid T="CardDto" Items="@_cards" Filterable="true" QuickFilter="@_quickFilter" Bordered="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Cards</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="_searchString" Placeholder="Search by name" Adornment="Adornment.Start" Immediate="true"
                        AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer/>
        <MudCard>
            <MudCardMedia Image="">

            </MudCardMedia>
        </MudCard>
    </ToolBarContent>
    <Columns>
        <HierarchyColumn T="CardDto"/>
        <Column T="CardDto" Field="Name"/>
        <Column T="CardDto" Field="Format"/>
        <Column T="CardDto" Field="Traits"/>
        <Column T="CardDto" Field="CardText" Title="Card text"/>
    </Columns>
    <ChildRowContent>
        <MudCard Outlined="true">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@context.Item.Name</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @{
                    var srcPath = "img/Sets/" + context.Item.SetId + "/Cards/" + context.Item.Id + ".jpg";
                }
                <MudImage Src="@srcPath" ObjectPosition="ObjectPosition.Center"></MudImage>
            </MudCardContent>
        </MudCard>
    </ChildRowContent>
    <PagerContent>
        <MudDataGridPager T="CardDto"/>
    </PagerContent>
</MudDataGrid>

@code {
    private IEnumerable<CardDto> _cards = new List<CardDto>();
    private string _searchString;
    private string _displayCard;

    protected override async Task OnInitializedAsync()
    {
        _cards = await _cardService.GetAllCards();
    }

    private Func<CardDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private void DisplayCard(CardDto selectedCard)
    {
        
    }
}
