@using RawDealDb.Core.DTO;
@using RawDealDb.Core.Enums;
@using RawDealDb.UI.Interfaces;
@inject ICardService _cardService;


<MudDataGrid T="CardDto" Items="@_cards" Filterable="false" QuickFilter="@_quickFilter" Bordered="true">
    <ToolBarContent>
        <MudSelect T="int" Label="Search by" AnchorOrigin="Origin.BottomCenter" @bind-Value="_selectValue">
            @foreach (var searchByItem in _searchByDto.SearchByValues)
            {
                <MudSelectItem Value="searchByItem.Key">@searchByItem.Value</MudSelectItem>
            }
        </MudSelect>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search value" Adornment="Adornment.Start" Immediate="true"
                        AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer/>
    </ToolBarContent>
    <Columns>
        <Column T="CardDto" Filterable="false" >
            <CellTemplate>
                <MudCard Outlined="true">
                    @{
                        var srcPath = "img/Sets/" + context.Item.SetId + "/Cards/" + context.Item.Id + ".jpg";
                    }
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="9" Class="d-flex align-center justify-center mud-width-full">
                                <MudText Style="text-decoration: underline;">@context.Item.Name</MudText>
                            </MudItem>
                            <MudItem xs="3" Class="d-flex align-right justify-center mud-width-full">
                                <MudText><b>F</b> @context.Item.Fortitude</MudText>
                            </MudItem>
                            <MudItem xs="12" Class="d-flex mud-width-full">
                                <MudText><b>Type:</b> @context.Item.CardType</MudText>
                            </MudItem>
                            <MudItem xs="12" Class="d-flex mud-width-full">
                                <MudText><b>Card text:</b> @context.Item.CardText</MudText>
                            </MudItem>
                            <MudItem xs="12" Class="d-flex mud-width-full">
                                <MudText><b>Traits:</b> @context.Item.Traits</MudText>
                            </MudItem>
                            <MudItem xs="12" Class="d-flex mud-width-full">
                                <MudText><b>Set:</b> @context.Item.SetName</MudText>
                            </MudItem>
                            <MudItem xs="9" Class="d-flex align-right justify-center mud-width-full">
                            </MudItem>
                            <MudItem xs="3" Class="d-flex align-right justify-center mud-width-full">
                                <MudText><b>D</b> @context.Item.Damage</MudText>
                            </MudItem>
                        </MudGrid>

                    </MudCardContent>
                </MudCard>
                
            </CellTemplate>
        </Column>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="CardDto"/>
    </PagerContent>
</MudDataGrid>

@code {
    private IEnumerable<CardDto> _cards = new List<CardDto>();
    private SearchByDto _searchByDto = new SearchByDto();
    private int _selectValue;
    private string _searchString = string.Empty;
    private string _displayCard = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _cards = await _cardService.GetAllCards();
    }

    private Func<CardDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (_selectValue == (int)SearchByEnum.CardName && x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (_selectValue == (int)SearchByEnum.Set && x.SetName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (_selectValue == (int)SearchByEnum.Fortitude && x.Fortitude.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (_selectValue == (int)SearchByEnum.Damage && x.Damage.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (_selectValue == (int)SearchByEnum.SuperStarLogo && x.SuperStarLogo.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (_selectValue == (int)SearchByEnum.SuperStarValue && x.SuperStarValue.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (_selectValue == (int)SearchByEnum.CardText && x.CardText.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (_selectValue == (int)SearchByEnum.Traits && x.Traits.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };


}
